name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  DATABASE_URL: postgres://postgres:password@localhost:5432/capping2025
  API_BASE_URL: http://localhost:3001
  FRONTEND_URL: http://localhost:5173
  BIND_ADDRESS: 0.0.0.0:3001

jobs:
  # format:
  #   name: Format
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: dtolnay/rust-toolchain@stable
  #       with:
  #         components: rustfmt
  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-on-failure: "true"
  #         cache-all-crates: "true"
  #         cache-workspace-crates: "true"
  #     - name: Check all workspaces
  #       run: cargo fmt --check

  # security_audit:
  #   name: Security Audit
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-on-failure: "true"
  #         cache-all-crates: "true"
  #         cache-workspace-crates: "true"
  #     - uses: actions-rs/audit-check@v1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}

  # sqlx_prepare:
  #   name: SQLx Migration Prepare
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: ankane/pgvector:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: capping2025
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: dtolnay/rust-toolchain@stable
  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-on-failure: "true"
  #         cache-all-crates: "true"
  #         cache-workspace-crates: "true"
  #     - name: Install SQLx CLI
  #       run: cargo install sqlx-cli --no-default-features --features rustls,postgres
  #     - name: Setup database
  #       run: |
  #         sqlx database create
  #         psql "$DATABASE_URL" -f migrations/01_migration_script.sql
  #     - name: Prepare SQLx offline data
  #       run: cargo sqlx prepare --database-url "$DATABASE_URL"

  # check:
  #   name: Check
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: ankane/pgvector:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: capping2025
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: dtolnay/rust-toolchain@stable
  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-on-failure: "true"
  #         cache-all-crates: "true"
  #         cache-workspace-crates: "true"
  #     - name: Install SQLx CLI
  #       run: cargo install sqlx-cli --no-default-features --features rustls,postgres
  #     - name: Setup database
  #       run: |
  #         sqlx database create
  #         psql "$DATABASE_URL" -f migrations/01_migration_script.sql
  #     - name: Check all workspaces
  #       run: cargo check --all-targets --all-features --locked

  # clippy:
  #   name: Clippy
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: ankane/pgvector:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: capping2025
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: dtolnay/rust-toolchain@stable
  #       with:
  #         components: clippy
  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-on-failure: "true"
  #         cache-all-crates: "true"
  #         cache-workspace-crates: "true"
  #     - name: Install SQLx CLI
  #       run: cargo install sqlx-cli --no-default-features --features rustls,postgres
  #     - name: Setup database
  #       run: |
  #         sqlx database create
  #         psql "$DATABASE_URL" -f migrations/01_migration_script.sql
  #     - name: Run clippy
  #       run: cargo clippy --all-targets --all-features --locked -- -D warnings

  # tests:
  #   name: Unit and Integration Tests
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: ankane/pgvector:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: capping2025
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: dtolnay/rust-toolchain@stable
  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-on-failure: "true"
  #         cache-all-crates: "true"
  #         cache-workspace-crates: "true"
  #     - name: Install SQLx CLI
  #       run: cargo install sqlx-cli --no-default-features --features rustls,postgres
  #     - name: Setup database
  #       run: |
  #         sqlx database create
  #         psql "$DATABASE_URL" -f migrations/01_migration_script.sql
  #     - name: Run tests
  #       run: cargo test --all-targets --all-features --locked

  # bench:
  #   name: Benchmarks
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: ankane/pgvector:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: capping2025
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: dtolnay/rust-toolchain@stable
  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-on-failure: "true"
  #         cache-all-crates: "true"
  #         cache-workspace-crates: "true"
  #     - name: Install SQLx CLI
  #       run: cargo install sqlx-cli --no-default-features --features rustls,postgres
  #     - name: Setup database
  #       run: |
  #         sqlx database create
  #         psql "$DATABASE_URL" -f migrations/01_migration_script.sql
  #     - name: Run benchmarks
  #       run: cargo bench --all-targets --all-features --locked

  code_cov:
    name: Code Coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: capping2025
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"
          cache-all-crates: "true"
          cache-workspace-crates: "true"
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin
      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres
      - name: Setup database
        run: |
          sqlx database create
          psql "$DATABASE_URL" -f migrations/01_migration_script.sql
      - name: Run Code Coverage
        run: cargo tarpaulin

  front_end_build:
    name: Front-End Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    - uses: actions/setup-node@v6
      with:
        node-version: 'latest'
        node-version-file: './frontend/package.json'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    - name: Run Build
      run: |
        cd ./frontend
        npm ci
        npm run build

  # front_end_tests:
  #   name: Front-End Tests
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: ankane/pgvector:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: capping2025
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #   - uses: actions/checkout@v5
  #   - uses: dtolnay/rust-toolchain@stable
  #   - uses: Swatinem/rust-cache@v2
  #     with:
  #       cache-on-failure: "true"
  #       cache-all-crates: "true"
  #       cache-workspace-crates: "true"
  #   - uses: taiki-e/install-action@v2
  #     with:
  #       tool: cargo-tarpaulin
  #   - name: Install SQLx CLI
  #     run: cargo install sqlx-cli --no-default-features --features rustls,postgres
  #   - name: Setup database
  #     run: |
  #       sqlx database create
  #       psql "$DATABASE_URL" -f migrations/01_migration_script.sql
  #   - uses: actions/setup-node@v6
  #     with:
  #       node-version: 'latest'
  #       node-version-file: './frontend/package.json'
  #       cache: 'npm'
  #       cache-dependency-path: './frontend/package-lock.json'
  #   - name: Run Tests
  #     run: |
  #       cargo build
  #       cargo run &
  #       BACKEND_PID=$!

  #       cd ./frontend
  #       npm i

  #       timeout=10
  #       elapsed=0
  #       while ! nc -z localhost 3001; do
  #         sleep 0.1
  #         elapsed=$(echo "$elapsed + 0.1" | bc)
  #         if (( $(echo "$elapsed > $timeout" | bc -l) )); then
  #           echo "Backend did not start in $timeout seconds"
  #           kill $BACKEND_PID
  #           exit 1
  #         fi
  #       done

  #       npm run test

  #       kill $BACKEND_PID

  front_end_code_cov:
    name: Front-End Code Coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: capping2025
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v5
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
        cache-all-crates: "true"
        cache-workspace-crates: "true"
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-tarpaulin
    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features rustls,postgres
    - name: Setup database
      run: |
        sqlx database create
        psql "$DATABASE_URL" -f migrations/01_migration_script.sql
    - uses: actions/setup-node@v6
      with:
        node-version: 'latest'
        node-version-file: './frontend/package.json'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    - name: Run Code Coverage
      run: |
        cargo build
        ./target/debug/Capping2025 &
        BACKEND_PID=$!

        cd ./frontend
        npm i

        timeout=10
        elapsed=0
        while ! nc -z localhost 3001; do
          sleep 0.1
          elapsed=$(echo "$elapsed + 0.1" | bc)
          if (( $(echo "$elapsed > $timeout" | bc -l) )); then
            echo "Backend did not start in $timeout seconds"
            kill $BACKEND_PID
            exit 1
          fi
        done

        npm run codecov

        kill $BACKEND_PID