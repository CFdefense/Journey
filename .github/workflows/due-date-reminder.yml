name: Issue Due Date Reminder

on:
  schedule:
    # switch these on November 2 at 2:00 am
    - cron: "59 3 * * *"   # 3:59 UTC == 11:59 PM New York (DST)
    # - cron: "59 4 * * *"   # 4:59 UTC == 11:59 PM New York (Standard Time)
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Send due reminders
        env:
          GITHUB_TOKEN: ${{ secrets.CAPPING_PAT }}
        run: |
          NOW=$(date -u +%s)
          TWO_DAYS=$((NOW + 172800)) # 48 hours ahead
          echo "NOW: $NOW, TWO_DAYS: $TWO_DAYS"

          # Fetch open issues and their ProjectV2 fields
          ISSUES=$(gh api graphql --paginate -f query='
          query {
            repository(owner:"CFdefense", name:"Capping2025") {
              issues(first:100, states:OPEN) {
                pageInfo {
                  endCursor
                  startCursor
                  hasNextPage
                  hasPreviousPage
                }
                nodes {
                  title
                  url
                  assignees(first:5) { nodes { login } }
                  projectItems(first:50) {
                    nodes {
                      fieldValues(first:20) {
                        nodes {
                          ... on ProjectV2ItemFieldDateValue {
                            date
                            field { ... on ProjectV2Field { name } }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }' --jq '
            .data.repository.issues.nodes[] |
            {
              title: .title,
              url: .url,
              assignees: [.assignees.nodes[].login],
              dueDate: (
                .projectItems.nodes[].fieldValues.nodes[]
                | select(.field.name=="Due")
                | .date
              )
            }
          ' | jq -s '.')

          echo "Issues with due date:"
          echo "$ISSUES" | jq

          EMBEDS_OVERDUE="[]"
          EMBEDS_SOON="[]"
          for issue in $(echo "$ISSUES" | jq -c '.[]'); do
          DUE=$(echo "$issue" | jq -r .dueDate)
            TITLE=$(echo "$issue" | jq -r .title)
            URL=$(echo "$issue" | jq -r .url)
            ASSIGNEES=$(echo "$issue" | jq -r '.assignees | if length==0 then "No Assignee" else join(", ") end')

            # Parse due date as UTC
            DUE_EPOCH=$(TZ="America/New_York" date -d "${DUE} 23:58:00" +%s)

            if [ "$DUE_EPOCH" -lt "$NOW" ]; then
              # Overdue
              EMBEDS_OVERDUE=$(echo "$EMBEDS_OVERDUE" | jq \
                --arg title "$TITLE" \
                --arg url "$URL" \
                --arg due "$DUE" \
                --arg assignees "$ASSIGNEES" \
                --argjson epoch "$DUE_EPOCH" \
                '. + [{"title": $title, "url": $url, "description": "‚ùó Overdue since " + $due + "\nüë§ Assignee(s): " + $assignees, "color": 15158332, "epoch": $epoch}]')
            elif [ "$DUE_EPOCH" -le "$TWO_DAYS" ]; then
              # Due soon
              EMBEDS_SOON=$(echo "$EMBEDS_SOON" | jq \
                --arg title "$TITLE" \
                --arg url "$URL" \
                --arg due "$DUE" \
                --arg assignees "$ASSIGNEES" \
                --argjson epoch "$DUE_EPOCH" \
                '. + [{"title": $title, "url": $url, "description": "‚ö†Ô∏è Due on " + $due + "\nüë§ Assignee(s): " + $assignees, "color": 15105570, "epoch": $epoch}]')
            else
              echo "Skipping future issue: $TITLE ($DUE)"
            fi
          done

          send_embeds() {
            local embeds=$1
            local header=$2
            COUNT=$(echo "$embeds" | jq 'length')
            if [ "$COUNT" -gt 0 ]; then
              EMBEDS_SORTED=$(echo "$embeds" | jq 'sort_by(.epoch) | map(del(.epoch))')
              curl -H "Content-Type: application/json" \
                -X POST \
                -d "{\"content\": \"$header\", \"embeds\": $EMBEDS_SORTED}" \
                "$DISCORD_WEBHOOK"
            fi
          }

          send_embeds "$EMBEDS_OVERDUE" "‚ùó Overdue issues:"
          send_embeds "$EMBEDS_SOON" "üì¢ Issues due in the next 48 hours:"