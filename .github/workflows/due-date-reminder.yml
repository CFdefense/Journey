name: Issue Due Date Reminder

on:
  schedule:
    # switch these on November 2 at 2:00 am
    - cron: "59 3 * * *"   # 3:59 UTC == 11:59 PM New York (DST)
    # - cron: "59 4 * * *"   # 4:59 UTC == 11:59 PM New York (Standard Time)
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Send due reminders
        env:
          GITHUB_TOKEN: ${{ secrets.CAPPING_PAT }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          NOW=$(date -u +%s)
          TWO_DAYS=$((NOW + 172800)) # 48 hours ahead
          echo "NOW: $NOW, TWO_DAYS: $TWO_DAYS"

          # Fetch open issues and their ProjectV2 fields
          ISSUES_RAW=$(gh api graphql --paginate -f query='
          query {
            repository(owner:"CFdefense", name:"Capping2025") {
              issues(first:100, states:OPEN) {
                pageInfo {
                  endCursor
                  startCursor
                  hasNextPage
                  hasPreviousPage
                }
                nodes {
                  title
                  url
                  assignees(first:5) { nodes { login } }
                  projectItems(first:1) {
                    nodes {
                      fieldValueByName("Due") {
                        ... on ProjectV2ItemFieldDateValue { date }
                      }
                    }
                  }
                }
              }
            }
          }')
          ISSUES=$(echo $"ISSUES_RAW" | jq '
            .data.repository.issues.nodes[] |
            {
              title: .title,
              url: .url,
              assignees: [.assignees.nodes[].login],
              dueDate: (
                .projectItems.nodes[].fieldValueByName.date // "null"
              )
            }
          ' | jq -s '.')

          echo "Issues with due date:"
          echo "$ISSUES_RAW"
          echo "$ISSUES"

          mapfile -t ISSUE_ARRAY < <(echo "$ISSUES" | jq -c '.[]')
          EMBEDS_OVERDUE="[]"
          EMBEDS_SOON="[]"
          for issue in "${ISSUE_ARRAY[@]}"; do
            DUE=$(echo "$issue" | jq -r .dueDate)
            TITLE=$(echo "$issue" | jq -r .title)
            URL=$(echo "$issue" | jq -r .url)
            ASSIGNEES=$(echo "$issue" | jq -r '.assignees | if length==0 then "No Assignee" else join(", ") end')

            # Parse due date as UTC
            if [ -z "$DUE" ] || [ "$DUE" = "null" ]; then
              echo "Skipping issue with no due date: $TITLE"
              continue
            fi
            if ! DUE_EPOCH=$(TZ="America/New_York" date -d "${DUE} 23:58:00" +%s 2>/dev/null); then
              echo "Skipping issue with invalid due date: $TITLE ($DUE)"
              continue
            fi

            if [ "$DUE_EPOCH" -lt "$NOW" ]; then
              # Overdue
              EMBEDS_OVERDUE=$(echo "$EMBEDS_OVERDUE" | jq --arg title "$TITLE" \
                                                            --arg url "$URL" \
                                                            --arg due "$DUE" \
                                                            --arg assignees "$ASSIGNEES" \
              '
                . + [{
                  "title": $title,
                  "url": $url,
                  "description": "‚ùó Overdue since \($due)\nüë§ Assignee(s): \($assignees)",
                  "color": 15158332
                }]
              ')
            elif [ "$DUE_EPOCH" -le "$TWO_DAYS" ]; then
              # Due soon
              EMBEDS_SOON=$(echo "$EMBEDS_SOON" | jq --arg title "$TITLE" \
                                                        --arg url "$URL" \
                                                        --arg due "$DUE" \
                                                        --arg assignees "$ASSIGNEES" \
              '
                . + [{
                  "title": $title,
                  "url": $url,
                  "description": "‚ö†Ô∏è Due on \($due)\nüë§ Assignee(s): \($assignees)",
                  "color": 15105570
                }]
              ')
            else
              echo "Skipping future issue: $TITLE ($DUE)"
            fi
          done

          send_embeds_chunked() {
            local embeds=$1
            local header=$2
            COUNT=$(echo "$embeds" | jq 'length')
            if [ "$COUNT" -eq 0 ]; then
              return
            fi

            EMBEDS_SORTED=$(echo "$embeds" | jq 'sort_by(.epoch) | map(del(.epoch))')
            # Split into chunks of 10
            CHUNKS=$(( (COUNT + 9) / 10 ))

            for i in $(seq 0 $((CHUNKS-1))); do
              START=$((i*10))
              END=$((START+10))
              SUBSET=$(echo "$EMBEDS_SORTED" | jq ".[$START:$END]")
              WEBHOOK_URL=$(echo "$DISCORD_WEBHOOK" | tr -d '\r\n')
              echo "Sending chunk $((i+1))/$CHUNKS..."
              curl -H "Content-Type: application/json" -X POST \
                -d "{\"content\": \"$header\", \"embeds\": $SUBSET}" \
                "$WEBHOOK_URL"
            done
          }

          send_embeds_chunked "$EMBEDS_OVERDUE" "‚ùó Overdue issues:"
          send_embeds_chunked "$EMBEDS_SOON" "üì¢ Issues due in the next 48 hours:"