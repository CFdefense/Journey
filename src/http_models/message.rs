use chrono::NaiveDateTime;
use serde::{Deserialize, Serialize};
use utoipa::{ToResponse, ToSchema};

/// A message in a chat session
#[derive(Debug, Serialize, ToSchema, ToResponse)]
pub struct Message {
	/// Primary key
	pub id: i32,
	/// Whether the message was sent by a user or generated by the LLM
	pub is_user: bool,
	/// UTC timestamp this message was sent (%Y-%m-%d %H:%M:%S)
	pub timestamp: NaiveDateTime,
	/// Content of this message
	pub text: String,
	/// Possible itinerary associated with this message
	pub itinerary_id: Option<i32>,
}

/// Request model for `/api/chat/messagePage` endpoint
#[derive(Deserialize, ToSchema)]
pub struct MessagePageRequest {
	/// chat session to fetch page from
	pub chat_session_id: i32,
	/// Possible message id to represent the end of the page
	/// * If Some, it will fetch this message and consecutive previous messages in chronological order
	/// * If None, it will fetch the latest consecutive messages from the chat session in chronological order
	pub message_id: Option<i32>,
}

/// Response model for `/api/chat/messagePage` endpoint
#[derive(Serialize, ToSchema, ToResponse)]
pub struct MessagePageResponse {
	/// A page of messages guaranteed to be sorted in chronological order
	pub message_page: Vec<Message>,
	/// The id of the message that comes chronologically before the first message in message_page, if it exists
	pub prev_message_id: Option<i32>,
}

/// Request model for `/api/chat/updateMessage` endpoint
#[derive(Deserialize, ToSchema)]
pub struct UpdateMessageRequest {
	/// ID of the message to update. This message must belong to a chat session which belongs to the user who made the request
	pub message_id: i32,
	/// The text to replace the old content with
	pub new_text: String,
	/// A possible itinerary to give context to the LLM
	pub itinerary_id: Option<i32>,
}

/// Request model for `/api/chat/sendMessage` endpoint
#[derive(Deserialize, ToSchema)]
pub struct SendMessageRequest {
	/// The chat session to send this message in. It must belong to the user making the request.
	pub chat_session_id: i32,
	/// The content of the message
	pub text: String,
	/// A possible itinerary to give context to the LLM
	pub itinerary_id: Option<i32>,
}

/// Response model for `/api/chat/sendMessage` endpoint
#[derive(Debug, Serialize, ToSchema, ToResponse)]
pub struct SendMessageResponse {
	/// The newly-created id of the message you just sent
	pub user_message_id: i32,
	/// The response message from the LLM
	pub bot_message: Message,
}
